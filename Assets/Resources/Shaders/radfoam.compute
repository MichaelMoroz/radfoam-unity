#pragma kernel BuildAdjDiff
#pragma kernel RadFoam

#pragma multi_compile_local _ SH_DEGREE_1 SH_DEGREE_2 SH_DEGREE_3 

#include "UnityCG.cginc"
#include "sh_utils.cginc"

float4x4 _Camera2WorldMatrix;
float4x4 _InverseProjectionMatrix;
int _CameraModel;
float _FisheyeFOV;
int _DebugView;

int _TestAlgo;

Texture2D<float4> _srcTex;
RWTexture2D<float4> _outTex;

float2 GetPixelCoords(uint2 id)
{
    uint w, h;
    _outTex.GetDimensions(w, h);
    return id / float2(w, h) * 2 - 1;
}

struct Ray
{
    float3 origin;
    float3 direction;
};

Ray GetCameraRay(float2 pixelCoords)
{
    Ray o;
    o.origin       = mul(_Camera2WorldMatrix, float4(0,0,0,1)).xyz; 
    float3 fragPos = mul(_InverseProjectionMatrix, float4(pixelCoords,0,1)).xyz; 
    o.direction    = mul(_Camera2WorldMatrix, float4(fragPos,0)).xyz ;
    return o;
}

static const float PI = 3.14159265f;
Ray GetCameraRayFisheye(float2 uv, float fov)
{
    Ray o;
    o.origin       = mul(_Camera2WorldMatrix, float4(0,0,0,1)).xyz;

    float theta = atan2(uv.y, uv.x);
    float phi = sqrt(dot(uv, uv)) * fov * (1.0 / 360.0) * 2 * PI;
    float3 local_dir = sin(phi) * cos(theta) * float3(1, 0, 0) 
                     + sin(phi) * sin(theta) * float3(0, 1, 0) 
                     + cos(phi) *  float3(0, 0, -1);
    o.direction = mul(_Camera2WorldMatrix, float4(local_dir, 0)).xyz;
    if (phi >= PI) {
        o.direction = (float3)0;
    }
    return o;
}

#define CHUNK_SIZE 7

struct Attr {
    uint density;
    uint harmonics[SH_BUF_LEN];
};

StructuredBuffer<uint>   _start_index;
StructuredBuffer<float4> _positions;
StructuredBuffer<Attr>   _shs;
StructuredBuffer<half4>  _adjacency_diff;
StructuredBuffer<uint>   _adjacency;

#define GROUP_SIZE 8
// #define GROUP_SIZE_X 1
// #define GROUP_CACHE (GROUP_SIZE * GROUP_SIZE * GROUP_SIZE_X)
// groupshared uint group_cell;
// groupshared float4 group_cell_data;
// groupshared Attr group_attrs;
// groupshared uint group_adj_from;
// groupshared uint group_adj_count;
// groupshared half3 group_diffs[GROUP_CACHE]; // FIXME: what if a cell has more than GROUP_SIZE * GROUP_SIZE adj?
// groupshared bool break_group;

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void RadFoam (uint3 id : SV_DispatchThreadID, uint group_index : SV_GroupIndex)
{
    bool ignore = false;
    Ray ray;
    {
        uint w, h;
        _outTex.GetDimensions(w, h);
        if (id.x > w || id.y > h) {
            ignore = true;
        }

        float aspect_ratio = (float)w / (float)h;
        float x = id.x / (float)w;
        float y = id.y / (float)h;
        
        if (_CameraModel == 1) {
            float2 uv = float2((2.0f * x - 1.0f) * aspect_ratio,  2.0f * y - 1.0f);
            ray = GetCameraRayFisheye(uv, _FisheyeFOV);
        } else {
            float2 uv = float2((2.0f * x - 1.0f),  2.0f * y - 1.0f);
            ray = GetCameraRay(uv);
        }
    }
    float4 src_color = _srcTex[id.xy];
    if (dot(ray.direction, ray.direction) == 0) {
        ignore = true;
        // _outTex[id.xy] = src_color;
        // return; // fisheye fov too large
    }
    ray.direction = normalize(ray.direction);

    float scene_depth = 10000;

    float sh_coeffs[SH_DIM];
    sh_coefficients(ray.direction, sh_coeffs);

    // tracing state
    uint cell = _start_index[0];

    float transmittance = 1.0f;
    float3 color = float3(0, 0, 0);
    float t_0 = 0.0f;

    int i = 0;

    // Trying to be smart, sharing data within a thread group, but does not seem to make a difference..
    // if (_TestAlgo == 1){
    //     if (group_index == 0) {
    //         break_group = false;
    //     }
    //     GroupMemoryBarrierWithGroupSync();

    //     for (; i < 256 && !break_group; i++) {
    //         if (group_index == 0) {
    //             group_cell = cell;
    //             group_attrs = _shs[cell];
    //             group_cell_data = _positions[cell];
    //             group_adj_from = cell > 0 ? asuint(_positions[cell - 1].w) : 0;
    //             group_adj_count = min(GROUP_CACHE, asuint(group_cell_data.w) - group_adj_from);
    //         }
    //         GroupMemoryBarrierWithGroupSync();

    //         [unroll(GROUP_SIZE_X)]
    //         for (int g = 0; g < GROUP_SIZE_X; g++) {
    //             int index = g * (GROUP_SIZE * GROUP_SIZE) + group_index;
    //             group_diffs[index] = (half3) _adjacency_diff[group_adj_from + index].xyz;
    //         }

    //         // if (group_index < group_adj_count) {
    //         //     group_diffs[group_index] = (half3) _adjacency_diff[group_adj_from + group_index].xyz;
    //         // }
    //         GroupMemoryBarrierWithGroupSync();   

    //         if (group_cell == cell) {
    //             float t_1 = scene_depth;
    //             uint next_face = 0xFFFFFFFF; 
    //             [loop]
    //             for (uint f = 0; f < group_adj_count; f++) { 
    //                 float3 diff = group_diffs[f].xyz;
    //                 float denom = dot(diff, ray.direction);
    //                 float3 mid = group_cell_data.xyz + diff * 0.5f;
    //                 float t = dot(mid - ray.origin, diff) / denom;
    //                 bool valid = denom > 0 && t < t_1;
    //                 t_1 = valid ? t : t_1;
    //                 next_face = valid ? group_adj_from + f : next_face;
    //             }

    //             float alpha = 1.0 - exp(-f16tof32(group_attrs.density) * (t_1 - t_0));
    //             float weight = transmittance * alpha;

    //             if (alpha > 0.001) {
    //                 float3 rgb;
    //                 if (_DebugView == 1) {
    //                     rgb = sin(float3((cell >> 0), (cell >> 4), (cell >> 8)) * (1.0 / 1024)) * 0.5 + 0.5;
    //                 } else {
    //                     rgb = load_sh_as_rgb(sh_coeffs, group_attrs.harmonics);
    //                 }
    //                 color += rgb * weight;
    //             }
                
    //             transmittance = transmittance * (1.0 - alpha);

    //             bool should_continue = transmittance > 0.01 && next_face != 0xFFFFFFFF;
    //             cell = should_continue ? _adjacency[next_face] : 0xFFFFFFFF;
    //             t_0 = should_continue ? t_1 : t_0;

    //             if (!should_continue) {
    //                 break_group = true;
    //             }
    //         } else {
    //             break_group = true;
    //         }

    //         GroupMemoryBarrierWithGroupSync(); 
    //     }
    // }

    if (ignore) {
        return;
    }

    for (; i < 256 && transmittance > 0.01 && cell != 0xFFFFFFFF; i++) {
        uint adj_from = cell > 0 ? asuint(_positions[cell - 1].w) : 0;
        float4 cell_data = _positions[cell];
        uint adj_to = asuint(cell_data.w);
        
        float t_1 = scene_depth;
        uint next_face = 0xFFFFFFFF; 

        uint faces = adj_to - adj_from;

        for (uint f = 0; f < faces; f += 1) {
            half3 diff = (half3)_adjacency_diff[adj_from + f].xyz;
            float denom = dot(diff, ray.direction);
            float3 mid = cell_data.xyz + diff * 0.5f;
            float t = dot(mid - ray.origin, diff) / denom;
            bool valid = denom > 0 && t < t_1 && f < faces;
            t_1 = valid ? t : t_1;
            next_face = valid ? adj_from + f : next_face;
        }
 
        Attr attrs = _shs[cell];
        float alpha = 1.0 - exp(-f16tof32(attrs.density) * (t_1 - t_0));
        float weight = transmittance * alpha;

        if (alpha > 0.01) {
            // float3 rgb = float3((cell >> 0) & 0xFF, (cell >> 8) & 0xFF, (cell >> 16) & 0xFF) * (1.0 / 255.0);
            float3 rgb;
            if (_DebugView == 1) {
                rgb = sin(float3((cell >> 0), (cell >> 4), (cell >> 8)) * (1.0 / 1024)) * 0.5 + 0.5;
            } else {
                rgb = load_sh_as_rgb(sh_coeffs, attrs.harmonics);
            }
            color += rgb * weight;
        }
        
        transmittance = transmittance * (1.0 - alpha);
        cell = next_face != 0xFFFFFFFF ? _adjacency[next_face] : 0xFFFFFFFF;
        t_0 = t_1;
    }
    color = pow(color, 2.2f); // fix color..
    _outTex[id.xy] = float4(lerp(color, src_color.xyz, transmittance), 1);
}


// TODO: move to separate shader

uint _Count;
RWStructuredBuffer<half4> _adjacency_diff_uav;

[numthreads(1024, 1, 1)]
void BuildAdjDiff (uint3 id : SV_DispatchThreadID)
{
    uint cell = id.x;
    if (cell >= _Count)
        return;

    float3 cell_pos = _positions[cell].xyz;

    uint adj_from = cell > 0 ? asuint(_positions[cell - 1].w) : 0;
    uint adj_to = asuint(_positions[cell].w);

    for (uint a = adj_from; a < adj_to; a++) {
        uint adj = _adjacency[a];
        float3 adj_pos = _positions[adj].xyz;
        float3 adj_diff = adj_pos - cell_pos;

        _adjacency_diff_uav[a] = half4(adj_diff, 0);
    }
}